<?php

/**
 * @file
 * Functions to support theming in the bond theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Xss;
use Drupal\user\Entity\User;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function bond_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function bond_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function bond_preprocess_page(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function bond_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function bond_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function bond_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function bond_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function bond_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function bond_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function bond_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function bond_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function bond_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function bond_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function bond_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function bond_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function bond_preprocess_menu_local_task(array &$variables) {
  $variables['attributes']['class'][] = 'nav-item';
  $variables['link']['#options']['attributes']['class'][] = 'nav-link';
}

/**
 * Implements hook_preprocess_menu__MENE_NAME().
 */
function bond_preprocess_menu__account(array &$variables) {
  // Check if user is logged in
  $logged_in = \Drupal::currentUser()->isAuthenticated();
  // get user picture
  $variables['user_picture'] = '';
  if ($logged_in) {
    $user = User::load(\Drupal::currentUser()->id());
    if (!$user->user_picture->isEmpty()) {
      $style = \Drupal::entityTypeManager()->getStorage('image_style')->load('thumbnail');
      $url = $style->buildUrl($user->user_picture->entity->getFileUri());
      $variables['user_picture'] = $url;
    }
  }
}

/**
 * Implements hook_preprocess_input() for form submit button.
 */
function bond_preprocess_input(&$variables) {
  $element = $variables['element'];
  if ($element['#type'] == 'submit') {
    $variables['attributes']['class'][] = 'btn btn-primary btn-sm';
  }
  elseif ($element['#type'] == 'checkbox' || $element['#type'] == 'radio') {
    $variables['attributes']['class'][] = 'form-check-input';
  }
  else {
    $variables['attributes']['class'][] = 'form-control form-control-' . $element['#type'];
  }
}

/**
 * Implements hook_preprocess().
 */
function bond_preprocess(&$variables) {
  $variables['bond'] = [];
  $bond_settings = [
    'header_color',
    'header_link_style',
    'header_type',
    'header_type_sticky',
    'header_type_sticky_resize',
    'copyright_text',
    'display_social_round_icons',
    'header_position',
  ];
  $page_settings = [
    'page_header_style',
  ];
  $social_profiles = [
    'social_facebook',
    'social_googleplus',
    'social_linkedin',
    'social_twitter',
    'social_youtube',
    'social_instagram',
    'social_github',
    'social_drupal',
  ];

  // Retrieve General and Header options.
  foreach ($bond_settings as $bond_setting) {
    $value = trim(theme_get_setting($bond_setting, 'bond'));
    if (!empty($value)) {
      $variables['bond'][$bond_setting] = Xss::filter($value);
    }
  }

  // Retrieve Page related theme options.
  foreach ($page_settings as $page_setting) {
    $value = trim(theme_get_setting($page_setting, 'bond'));
    if (!empty($value)) {
      $variables['bond'][$page_setting] = Xss::filter($value);
    }
  }

  // Retrieve social profiles.
  foreach ($social_profiles as $social_profile) {
    $value = trim(theme_get_setting($social_profile, 'bond'));
    if (!empty($value)) {
      $variables['bond']['social_profiles'][$social_profile] = Xss::filter($value);
    }
  }

  // Process Copyright text.
  $copyright_text = theme_get_setting('copyright_text');
  if (!empty($copyright_text)) {
    $copyright_text = str_replace('@year', date('Y'), theme_get_setting('copyright_text'));
    $variables['bond']['copyright_text'] = $copyright_text;
  }

  // Default variables.
  $variables['sitename'] = \Drupal::config('system.site')->get('name');
  $variables['siteslogan'] = \Drupal::config('system.site')->get('slogan');
}

/**
 * Theme settings for Bond theme. Implements hook_form_FORM_ID_alter()
 */
function bond_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {

  // Footer copyrights settings.
  $form['bond_settings'] = [
    '#type' => 'fieldset',
    '#title' => t('Bond Theme Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  ];

  $form['bond_settings']['tabs'] = [
    '#type' => 'vertical_tabs',
    '#default_tab' => 'general_tab',
  ];

  $form['bond_settings']['general_tab']['general_options'] = [
    '#type' => 'details',
    '#title' => t('General Options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'tabs',
  ];

  $form['bond_settings']['header_tab']['header_options'] = [
    '#type' => 'details',
    '#title' => t('Top Header Options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'tabs',
  ];

  $form['bond_settings']['header_tab']['header_options']['header_position'] = [
    '#type' => 'select',
    '#title' => t('Header Position'),
    '#default_value' => theme_get_setting('header_position', 'bond'),
    '#description' => t('Choose header position'),
    '#options' => [
      'header-top' => t('Top'),
      'header-left' => t('Left'),
    ],
  ];

  $form['bond_settings']['header_tab']['header_options']['header_color'] = [
    '#type' => 'color',
    '#title' => t('Header Background Color'),
    '#default_value' => theme_get_setting('header_color', 'bond'),
    '#description' => t('Choose color that applies to header as background color. If choose header type Overlay, then background color will apply only when sticky header'),
  ];

  $form['bond_settings']['header_tab']['header_options']['header_link_style'] = [
    '#type' => 'select',
    '#title' => t('Header link Style'),
    '#default_value' => theme_get_setting('header_link_style', 'bond'),
    '#description' => t('Choose header link style'),
    '#options' => [
      'navbar-dark' => t('Light'),
      'navbar-light' => t('Dark'),
    ],
  ];

  $form['bond_settings']['header_tab']['header_options']['header_type'] = [
    '#type' => 'select',
    '#title' => t('Header Type'),
    '#description'   => t('Choose header type. If you choose overlay, then header will be overlaid over the below section/content.'),
    '#default_value' => theme_get_setting('header_type', 'bond'),
    '#options' => [
      'standard' => t('Standard'),
      'overlay' => t('Overlay'),
    ],
  ];

  $form['bond_settings']['header_tab']['header_options']['header_type_sticky'] = [
    '#type' => 'checkbox',
    '#title' => t('Sticky Header'),
    '#default_value' => theme_get_setting('header_type_sticky', 'bond'),
    '#description' => t('Enable the sticky header when scrolling down the page'),
  ];

  $form['bond_settings']['header_tab']['header_options']['header_type_sticky_resize'] = [
    '#type' => 'checkbox',
    '#title' => t('Sticky header resizing'),
    '#default_value' => theme_get_setting('header_type_sticky_resize', 'bond'),
    '#description' => t('Enable the sticky header to resize when scrolling down the page'),
  ];

  $form['bond_settings']['page_tab']['page_options'] = [
    '#type' => 'details',
    '#title' => t('Page Options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'tabs',
  ];

  $form['bond_settings']['page_tab']['page_options']['page_header_style'] = [
    '#type' => 'select',
    '#title' => t('Page Header Style'),
    '#default_value' => theme_get_setting('page_header_style', 'bond'),
    '#description' => t('Choose page header style. Ex. default, Full size, Box size. If node has field_image field then image shown as background for full and box sizes.'),
    '#options' => [
      'default' => t('Default'),
      'full-size' => t('Full Size'),
      'box-size' => t('Box Size'),
    ],
  ];

  $form['bond_settings']['social_tab']['social_profiles'] = [
    '#type' => 'details',
    '#title' => t('Social Profiles'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'tabs',
  ];

  $form['bond_settings']['social_tab']['social_profiles']['display_social_round_icons'] = [
    '#type' => 'checkbox',
    '#title' => t('Show round icons'),
    '#default_value' => theme_get_setting('display_social_round_icons', 'bond'),
    '#description' => t('Enable to show round icons for below updated social profiles'),
  ];

  $form['bond_settings']['social_tab']['social_profiles']['social_facebook'] = [
    '#type' => 'textfield',
    '#title' => t('Facebook'),
    '#default_value' => theme_get_setting('social_facebook', 'bond'),
    '#description' => t('Your facebook page/profile url'),
  ];

  $form['bond_settings']['social_tab']['social_profiles']['social_googleplus'] = [
    '#type' => 'textfield',
    '#title' => t('Google+'),
    '#default_value' => theme_get_setting('social_googleplus', 'bond'),
    '#description' => t('Your Google+ page/profile URL'),
  ];

  $form['bond_settings']['social_tab']['social_profiles']['social_linkedin'] = [
    '#type' => 'textfield',
    '#title' => t('LinkedIn'),
    '#default_value' => theme_get_setting('social_linkedin', 'bond'),
    '#description' => t('Your LinkedIn page/profile url'),
  ];

  $form['bond_settings']['social_tab']['social_profiles']['social_twitter'] = [
    '#type' => 'textfield',
    '#title' => t('Twitter'),
    '#default_value' => theme_get_setting('social_twitter', 'bond'),
    '#description' => t('Your Twitter username (no @).'),
  ];

  $form['bond_settings']['social_tab']['social_profiles']['social_youtube'] = [
    '#type' => 'textfield',
    '#title' => t('Youtube'),
    '#default_value' => theme_get_setting('social_youtube', 'bond'),
    '#description' => t('Your YouTube URL'),
  ];

  $form['bond_settings']['social_tab']['social_profiles']['social_instagram'] = [
    '#type' => 'textfield',
    '#title' => t('Instagram'),
    '#default_value' => theme_get_setting('social_instagram', 'bond'),
    '#description' => t('Your Instagram URL'),
  ];

  $form['bond_settings']['social_tab']['social_profiles']['social_github'] = [
    '#type' => 'textfield',
    '#title' => t('Github'),
    '#default_value' => theme_get_setting('social_github', 'bond'),
    '#description' => t('Your Github URL'),
  ];

  $form['bond_settings']['social_tab']['social_profiles']['social_drupal'] = [
    '#type' => 'textfield',
    '#title' => t('Drupal'),
    '#default_value' => theme_get_setting('social_drupal', 'bond'),
    '#description' => t('Your Drupal URL'),
  ];

  $form['bond_settings']['footer_tab']['footer_options'] = [
    '#type' => 'details',
    '#title' => t('Footer Options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'tabs',
  ];

  $form['bond_settings']['footer_tab']['footer_options']['copyright_text'] = [
    '#type' => 'textfield',
    '#title' => t('Enter copyright text'),
    '#default_value' => theme_get_setting('copyright_text', 'bond'),
    '#description' => t('The copyright text that appears in the footer. Use @year placeholder for define current year.'),
  ];
}
